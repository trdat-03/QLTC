import TelegramBot from "node-telegram-bot-api";
import fetch from "node-fetch";
import "dotenv/config";

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim();

  // T√°ch ph·∫ßn s·ªë ti·ªÅn (t·ª´ ƒë·∫ßu ƒë·∫øn kho·∫£ng tr·∫Øng ƒë·∫ßu ti√™n) v√† ph·∫ßn c√≤n l·∫°i
  const firstSpaceIndex = text.indexOf(" ");
  if (firstSpaceIndex === -1) {
    bot.sendMessage(
      chatId,
      'Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: \n\n1. "+s·ªë ti·ªÅn ghi ch√∫" (Thu ti·ªÅn)\n2. "s·ªë ti·ªÅn ghi ch√∫" (Chi ti√™u)',
      {
        parse_mode: "Markdown",
      }
    );
    return;
  }

  const rawAmount = text.slice(0, firstSpaceIndex).trim(); // Ph·∫ßn s·ªë ti·ªÅn
  const note = text.slice(firstSpaceIndex + 1).trim(); // Ph·∫ßn ghi ch√∫

  const now = new Date();
  const formattedTime =
    now.toLocaleTimeString("vi-VN", { hour: "2-digit", minute: "2-digit" }) +
    " " +
    now.toLocaleDateString("vi-VN");

  // H√†m chuy·ªÉn ƒë·ªïi chu·ªói s·ªë ti·ªÅn sang s·ªë nguy√™n
  const parseAmount = (input) => {
    const match = input.match(/^(\+)?(\d+)(k|m)?(\d+)?$/i);
    if (!match) return NaN;

    const isIncome = match[1] === "+";
    const mainPart = parseInt(match[2], 10); // Ph·∫ßn ch√≠nh
    const unit = match[3] ? match[3].toLowerCase() : ""; // ƒê∆°n v·ªã (k ho·∫∑c m)
    const decimalPart = match[4] ? parseInt(match[4], 10) : 0; // Ph·∫ßn l·∫ª (n·∫øu c√≥)

    let value = mainPart;

    if (unit === "k") {
      value *= 1000;
    } else if (unit === "m") {
      value *= 1000000;
      value += decimalPart * 1000; // Th√™m ph·∫ßn l·∫ª
    }

    return isIncome ? value : value; // Tr·∫£ v·ªÅ s·ªë ti·ªÅn
  };

  const amount = parseAmount(rawAmount);

  // X√°c ƒë·ªãnh lo·∫°i giao d·ªãch
  const type = rawAmount.startsWith("+") ? "Thu nh·∫≠p" : "Chi ti√™u";

  if (isNaN(amount) || amount <= 0) {
    bot.sendMessage(chatId, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.");
    return;
  }

  const data = {
    timestamp: formattedTime,
    type,
    amount,
    note,
  };

  const url = new URL(process.env.WEBHOOK_URL);
  url.searchParams.append("timestamp", data.timestamp);
  url.searchParams.append("type", data.type);
  url.searchParams.append("amount", data.amount);
  url.searchParams.append("note", data.note);

  bot.sendChatAction(chatId, "typing");

  fetch(url)
    .then((res) => res.json())
    .then((response) => {
      if (response.status === "success") {
        bot.sendMessage(
          chatId,
          `‚úÖ Giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n:\n\n‚è∞ **Th·ªùi gian:** ${
            data.timestamp
          }\nüí∞ **S·ªë ti·ªÅn:** ${data.amount.toLocaleString()} VND\nüìÇ **Lo·∫°i ti·ªÅn:** ${
            data.type
          }\nüìù **N·ªôi dung:** ${data.note}`,
          {
            parse_mode: "Markdown",
          }
        );
      } else {
        bot.sendMessage(
          chatId,
          "Kh√¥ng th·ªÉ ghi nh·∫≠n giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau!"
        );
      }
    })
    .catch((err) => {
      console.error(err);
      bot.sendMessage(chatId, "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!");
    });
});

console.log("Expense manager bot is running...");
